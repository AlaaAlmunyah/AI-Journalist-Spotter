# -*- coding: utf-8 -*-
"""Journalisr-Detector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JGl43_lJa-SqQOjo2O5EKe0v6P9JoLNa
"""

!pip install -q ultralytics roboflow

from ultralytics import YOLO
from roboflow import Roboflow
import os
from IPython.display import Image, display

from roboflow import Roboflow
rf = Roboflow(api_key="crYNE8U5phXWOWEINHTr")
project = rf.workspace("journalistdetection").project("journalist-items-detector")
version = project.version(2)
dataset = version.download("yolov8")

# 1. تدريب على الكاميرا والمايك
model1 = YOLO("yolov8s.yaml")
model1.train(data="/content/Journalist-Items-Detector-2/data.yaml", epochs=30)

metrics = model1.val()

from roboflow import Roboflow
rf = Roboflow(api_key="crYNE8U5phXWOWEINHTr")
project = rf.workspace("leo-ueno").project("people-detection-o4rdr")
version = project.version(9)
dataset = version.download("yolov8")

# 2. تدريب على الأشخاص
model2 = YOLO("yolov8s.yaml")
model2.train(data="/content/Journalist-Items-Detector-5/data.yaml", epochs=30)

# 3. تدريب على الأشخاص اللي معهم معدات
model3 = YOLO("yolov8n.yaml")
model3.train(data="/content/data-person-with-tools.yaml", epochs=30)



from roboflow import Roboflow
rf = Roboflow(api_key="crYNE8U5phXWOWEINHTr")
project = rf.workspace("journalistdetection").project("journalist-items-detector")
version = project.version(2)
dataset = version.download("yolov8")

from ultralytics import YOLO

model = YOLO("yolov8s.pt")

model.train(data="/content/Journalist-Items-Detector-2/data.yaml", epochs=50, imgsz=640)





from roboflow import Roboflow
rf = Roboflow(api_key="crYNE8U5phXWOWEINHTr")
project = rf.workspace("journalistdetection").project("journalist-items-detector")
version = project.version(6)
dataset = version.download("yolov8")



!ls /content/Journalist-Items-Detector-6/

from roboflow import Roboflow
import os

rf = Roboflow(api_key="crYNE8U5phXWOWEINHTr")
project = rf.workspace("journalistdetection").project("journalist-items-detector")
version = project.version(6)

# Download the dataset to a specific directory
dataset = version.download("yolov8", location="/content/journalist_dataset")

# Define the data path
data_path = "/content/journalist_dataset/data.yaml"

# Check if the data.yaml file exists
if os.path.exists(data_path):
    from ultralytics import YOLO
    # Train the model
    model2 = YOLO("yolov8s.yaml")
    model2.train(data=data_path, epochs=50, imgsz=640)
else:
    print(f"Error: data.yaml file not found in {data_path}")
    print("Please check the dataset download process and ensure the file exists.")

from ultralytics import YOLO

model3 = YOLO("yolov8s.yaml")
model3.train(data="/content/merged_dataset/data.yaml", epochs=50, imgsz=640)

# Remove the parentheses at the end. This treats it as a file path string.
'/tmp/tmp0q1v5v7p/merged_dataset/data.yaml'

from roboflow import Roboflow
import os
from ultralytics import YOLO

rf = Roboflow(api_key="crYNE8U5phXWOWEINHTr")
project = rf.workspace("journalistdetection").project("journalist-items-detector")
version = project.version(6)  # Or the desired version number

# Download the dataset to a persistent directory like /content/data
dataset = version.download("yolov8", location="/content/data")

# Define the data path
data_path = "/content/data/data.yaml"

# Check if the data.yaml file exists
if os.path.exists(data_path):
    # Train the model
    model = YOLO("yolov8s.yaml")
    model.train(data=data_path, epochs=50, imgsz=640)
else:
    print(f"Error: data.yaml file not found in {data_path}")
    print("Please check the dataset download process and ensure the file exists.")

from ultralytics import YOLO

# تحميل أفضل وزن
model = YOLO("runs/detect/train23/weights/best.pt")

# تشغيل التنبؤ على مجموعة التحقق (validation)
model.predict(
    source="/content/data/valid/images",
    save=True,
    project="runs/detect",
    name="predict",  # راح يحفظ النتائج في runs/detect/predict
    conf=0.25  #
)

import os
import cv2
import matplotlib.pyplot as plt

predict_path = '/content/runs/detect/predict'
labels_path = os.path.join(predict_path, 'labels')

if not os.path.exists(labels_path):
    print("انتبه انك عملت رن model.predict(...)  save=True")
else:
    # عرض الصور اللي تحقق الشرط
    for label_file in os.listdir(labels_path):
        if label_file.endswith(".txt"):
            label_path = os.path.join(labels_path, label_file)
            with open(label_path, 'r') as f:
                classes_in_image = [int(line.split()[0]) for line in f.readlines()]

            # الكلاسات: 0 = Camera, 1 = Microphone, 2 = Person
            if 2 in classes_in_image and (0 in classes_in_image or 1 in classes_in_image):
                image_file = label_file.replace(".txt", ".jpg")
                image_path = os.path.join(predict_path, image_file)
                img = cv2.imread(image_path)
                if img is not None:
                    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                    plt.imshow(img_rgb)
                    plt.title(f"{image_file} ✅")
                    plt.axis('off')
                    plt.show()

import os
import matplotlib.pyplot as plt
import cv2

predict_path = "runs/detect/predict"
image_files = [f for f in os.listdir(predict_path) if f.endswith(('.jpg', '.png'))]

for image_file in image_files:
    image_path = os.path.join(predict_path, image_file)
    img = cv2.imread(image_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    plt.figure(figsize=(8, 6))
    plt.imshow(img)
    plt.title(image_file)
    plt.axis("off")
    plt.show()

results = model.predict(source="/content/data/test/images", save=True, save_txt=True)